name: "Test"

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-backend:
    name: "Backend"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.x"
          dotnet-quality: "ga"

      - name: Build .NET solution
        run: >
          dotnet build Charts.sln
          --configuration Release
          --property:ContinuousIntegrationBuild=true
          -warnAsError

      - name: Verify .NET formatting
        run: dotnet format Charts.sln --verify-no-changes

      - name: Run backend tests with coverage
        run: |
          dotnet tool restore
          dotnet test Charts.sln \
            --collect:"XPlat Code Coverage" \
            --results-directory:./server/coverage \
            --logger:trx \
            --configuration Release \
            --property:ContinuousIntegrationBuild=true \
            -warnAsError

      - name: Convert coverage to lcov format
        run: |
          dotnet tool run reportgenerator \
            -reports:"server/coverage/**/coverage.cobertura.xml" \
            -targetdir:"server/coverage" \
            -reporttypes:"lcov"

      - name: Publish backend test results
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: xUnit Tests
          path: server/coverage/*.trx
          reporter: dotnet-trx

      - name: Upload backend coverage artifacts
        if: github.event_name == 'pull_request' && (success() || failure())
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-report
          path: |
            server/coverage/*.trx
            server/coverage/lcov.info

  build-website:
    name: "Website"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "22.15.x"
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Install packages
        run: npm install

      - name: Check web formatting
        run: npm run format:web:check

      - name: Lint
        run: npm run lint --workspace=@stock-charts/client

      - name: Run unit tests
        run: npm run test:coverage --workspace=@stock-charts/client

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Jest Tests
          path: client/test-results/junit.xml
          reporter: jest-junit

      - name: Upload coverage reports to Codecov
        if: github.event_name == 'pull_request'
        uses: codecov/codecov-action@v5
        with:
          files: ./client/coverage/lcov.info
          directory: ./client/coverage/
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Add coverage to summary
        if: github.event_name == 'pull_request' && (success() || failure())
        run: |
          echo "## 📊 Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Statements | Branches | Functions |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|------------|----------|-----------|" >> $GITHUB_STEP_SUMMARY

          # Frontend coverage
          if [ -f "./client/coverage/lcov.info" ]; then
            STATEMENTS=$(grep -o "LF:[0-9]*" ./client/coverage/lcov.info | awk -F: '{sum+=$2} END {print sum}')
            HIT_STATEMENTS=$(grep -o "LH:[0-9]*" ./client/coverage/lcov.info | awk -F: '{sum+=$2} END {print sum}')
            FUNCTIONS=$(grep -o "FNF:[0-9]*" ./client/coverage/lcov.info | awk -F: '{sum+=$2} END {print sum}')
            HIT_FUNCTIONS=$(grep -o "FNH:[0-9]*" ./client/coverage/lcov.info | awk -F: '{sum+=$2} END {print sum}')
            BRANCHES=$(grep -o "BRF:[0-9]*" ./client/coverage/lcov.info | awk -F: '{sum+=$2} END {print sum}')
            HIT_BRANCHES=$(grep -o "BRH:[0-9]*" ./client/coverage/lcov.info | awk -F: '{sum+=$2} END {print sum}')

            STMT_PCT=$(echo "$HIT_STATEMENTS $STATEMENTS" | awk '{if($2>0) printf "%.2f", $1*100/$2; else print "0"}')
            FUNC_PCT=$(echo "$HIT_FUNCTIONS $FUNCTIONS" | awk '{if($2>0) printf "%.2f", $1*100/$2; else print "0"}')
            BRANCH_PCT=$(echo "$HIT_BRANCHES $BRANCHES" | awk '{if($2>0) printf "%.2f", $1*100/$2; else print "0"}')

            echo "| Frontend | ${STMT_PCT}% (${HIT_STATEMENTS}/${STATEMENTS}) | ${BRANCH_PCT}% (${HIT_BRANCHES}/${BRANCHES}) | ${FUNC_PCT}% (${HIT_FUNCTIONS}/${FUNCTIONS}) |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Frontend | Not available | Not available | Not available |" >> $GITHUB_STEP_SUMMARY
          fi

          # Backend coverage
          if [ -f "./server/coverage/lcov.info" ]; then
            BACKEND_STATEMENTS=$(grep -o "LF:[0-9]*" ./server/coverage/lcov.info | awk -F: '{sum+=$2} END {print sum}')
            BACKEND_HIT_STATEMENTS=$(grep -o "LH:[0-9]*" ./server/coverage/lcov.info | awk -F: '{sum+=$2} END {print sum}')
            BACKEND_FUNCTIONS=$(grep -o "FNF:[0-9]*" ./server/coverage/lcov.info | awk -F: '{sum+=$2} END {print sum}')
            BACKEND_HIT_FUNCTIONS=$(grep -o "FNH:[0-9]*" ./server/coverage/lcov.info | awk -F: '{sum+=$2} END {print sum}')
            BACKEND_BRANCHES=$(grep -o "BRF:[0-9]*" ./server/coverage/lcov.info | awk -F: '{sum+=$2} END {print sum}')
            BACKEND_HIT_BRANCHES=$(grep -o "BRH:[0-9]*" ./server/coverage/lcov.info | awk -F: '{sum+=$2} END {print sum}')

            BACKEND_STMT_PCT=$(echo "$BACKEND_HIT_STATEMENTS $BACKEND_STATEMENTS" | awk '{if($2>0) printf "%.2f", $1*100/$2; else print "0"}')
            BACKEND_FUNC_PCT=$(echo "$BACKEND_HIT_FUNCTIONS $BACKEND_FUNCTIONS" | awk '{if($2>0) printf "%.2f", $1*100/$2; else print "0"}')
            BACKEND_BRANCH_PCT=$(echo "$BACKEND_HIT_BRANCHES $BACKEND_BRANCHES" | awk '{if($2>0) printf "%.2f", $1*100/$2; else print "0"}')

            echo "| Backend | ${BACKEND_STMT_PCT}% (${BACKEND_HIT_STATEMENTS}/${BACKEND_STATEMENTS}) | ${BACKEND_BRANCH_PCT}% (${BACKEND_HIT_BRANCHES}/${BACKEND_BRANCHES}) | ${BACKEND_FUNC_PCT}% (${BACKEND_HIT_FUNCTIONS}/${BACKEND_FUNCTIONS}) |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Backend | Not available | Not available | Not available |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📁 **Coverage reports:** Check the artifacts for detailed HTML coverage reports" >> $GITHUB_STEP_SUMMARY

      - name: Upload coverage artifacts
        if: github.event_name == 'pull_request' && (success() || failure())
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            client/coverage/
            client/test-results/
            server/coverage/lcov.info
            server/coverage/*.trx

      - name: Build site
        run: npm run build:prod --workspace=@stock-charts/client
